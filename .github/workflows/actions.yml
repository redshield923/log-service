# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push
  #   branches: ["main"]
  # pull_request:
  #   branches: ["main"]

permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: |
          cd app
          python -m pip install --upgrade pip
          python3 -m pip install pytest
          sudo apt-get install sqlite3
          python3 -m pip install --no-cache-dir --upgrade -r requirements.txt
      - name: Set up Test env
        run: |
          cd app
          echo -e "\n${Blue}Setting up local test environment...${Reset}"

          TEST_DB_PATH=database/test.db
          if [ -f "$TEST_DB_PATH" ] ; then
              rm "$TEST_DB_PATH"
          fi

          echo "$TEST_DB_PATH"
          touch "$TEST_DB_PATH"
          echo -e "\n${Green}Created test database...${Reset}"

          sqlite3 "$TEST_DB_PATH" < "$(pwd)/database/scripts/create_database_tables.sql"

          echo -e "\n${Green}Created tables. Inserting test data...${Reset}"

          sqlite3 "$TEST_DB_PATH" "INSERT INTO ref_usertype (type) VALUES ('user')"
          sqlite3 "$TEST_DB_PATH" "INSERT INTO ref_usertype (type) VALUES ('user')"
          sqlite3 "$TEST_DB_PATH" "INSERT INTO ref_usertype (type) VALUES ('admin')"
          sqlite3 "$TEST_DB_PATH" "INSERT INTO ref_usertype (type) VALUES ('superadmin')"
          sqlite3 "$TEST_DB_PATH" "INSERT INTO user (id, username, password, active, time_created, time_updated, updated_by, type) VALUES (1,'testadmin', '5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8', 1, julianday('now'), julianday('now'), 1, 2)"
          sqlite3 "$TEST_DB_PATH" "INSERT INTO user (id, username, password, active, time_created, time_updated, updated_by, type) VALUES (2,'testuser', '5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8', 1, julianday('now'), julianday('now'), 1, 1)"

          echo -e "\n${Green}Successfully inserted test data. Running test with pytest...${Reset}"
      - name: Run Pytest
        run: |
          cd app
          LOGGING_DATABASE_PATH=database/test.db LOGGING_SECRET=$(openssl rand -hex 32) pytest "$(pwd)/test.py"

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v3
      - name: Build Docker container
        run: |
          cd app
          docker build -f Dockerfile -t log-service:0.0.1 .
          docker tag log-service:0.0.1 log-service:latest
  docker-publish:
    runs-on: "ubuntu-20.04"

    steps:
      - uses: actions/checkout@v2

      # https://github.com/marketplace/actions/push-to-ghcr
      - name: Build and publish a Docker image for ${{ github.repository }}
        uses: macbre/push-to-ghcr@master
        with:
          image_name: ${{ github.repository }} # it will be lowercased internally
          github_token: ${{ secrets.GITHUB_TOKEN }}
          # optionally push to the Docker Hub (docker.io)
          # docker_io_token: ${{ secrets.DOCKER_IO_ACCESS_TOKEN }}  # see https://hub.docker.com/settings/security
          # customize the username to be used when pushing to the Docker Hub
          # docker_io_user: foobar  # see https://github.com/macbre/push-to-ghcr/issues/14
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: ["python"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Initializes the CodeQL tools for scanning.
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}
      - name: Autobuild
        uses: github/codeql-action/autobuild@v2
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:${{matrix.language}}"

  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10"]
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pylint
      - name: Analysing the code with pylint
        run: |
          pylint $(git ls-files '*.py')
