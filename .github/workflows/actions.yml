# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push
  #   branches: ["main"]
  # pull_request:
  #   branches: ["main"]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: |
          cd app
          python -m pip install --upgrade pip
          python3 -m pip install pytest
          sudo apt-get install sqlite3
          python3 -m pip install --no-cache-dir --upgrade -r requirements.txt
      - name: Set up Test env
        run: |
          cd app
          echo -e "\n${Blue}Setting up local test environment...${Reset}"

          TEST_DB_PATH=database/test.db
          if [ -f "$TEST_DB_PATH" ] ; then
              rm "$TEST_DB_PATH"
          fi

          echo "$TEST_DB_PATH"
          touch "$TEST_DB_PATH"
          echo -e "\n${Green}Created test database...${Reset}"

          sqlite3 "$TEST_DB_PATH" < "$(pwd)/database/scripts/create_database_tables.sql"

          echo -e "\n${Green}Created tables. Inserting test data...${Reset}"

          sqlite3 "$TEST_DB_PATH" "INSERT INTO ref_usertype (type) VALUES ('user')"
          sqlite3 "$TEST_DB_PATH" "INSERT INTO ref_usertype (type) VALUES ('user')"
          sqlite3 "$TEST_DB_PATH" "INSERT INTO ref_usertype (type) VALUES ('admin')"
          sqlite3 "$TEST_DB_PATH" "INSERT INTO ref_usertype (type) VALUES ('superadmin')"
          sqlite3 "$TEST_DB_PATH" "INSERT INTO user (id, username, password, active, time_created, time_updated, updated_by, type) VALUES (1,'testadmin', '5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8', 1, julianday('now'), julianday('now'), 1, 2)"
          sqlite3 "$TEST_DB_PATH" "INSERT INTO user (id, username, password, active, time_created, time_updated, updated_by, type) VALUES (2,'testuser', '5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8', 1, julianday('now'), julianday('now'), 1, 1)"

          echo -e "\n${Green}Successfully inserted test data. Running test with pytest...${Reset}"
      - name: Run Pytest
        run: |
          cd app
          LOGGING_DATABASE_PATH=database/test.db LOGGING_SECRET=$(openssl rand -hex 32) pytest "$(pwd)/test.py"
      - name: Build Docker container
        run: |
          cd app
          docker build -f Dockerfile -t log-service:0.0.1 .
          docker tag log-service:0.0.1 log-service:latest
